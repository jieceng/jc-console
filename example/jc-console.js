
(function(l, r) { if (!l || l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (self.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(self.document);
/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise, SuppressedError, Symbol */


var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __spreadArray(to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
}

typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
    var e = new Error(message);
    return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};

function toCamelCase(str) {
    return str.replace(/[_-]\w/g, function (match) { return match.charAt(1).toUpperCase(); });
}
function camelToKebab(camelCaseString) {
    return camelCaseString.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();
}
function isUndef(value) {
    return value === undefined;
}

var JcConsole = /** @class */ (function () {
    function JcConsole(options) {
        if (options === void 0) { options = {}; }
        this.options = options;
        this.backgroundColor = options.backgroundColor || "transparent";
        this.text = options.text || "text";
        this.defaultStyle = options.style || {};
        this.fontSize = options.fontSize || "12px";
        this.color = options.color || "#fff";
        this.radius = options.radius || "2px";
        this.padding = options.padding || "3px 5px";
        this.margin = options.margin || "0 5px 0 0";
        this.primaryColor = options.primaryColor || "#165DFF";
        this.dangerColor = options.dangerColor || "#DC3545";
        this.errorColor = options.errorColor || "rgb(245, 108, 108)";
        this.infoColor = options.infoColor || "rgb(144, 147, 153)";
        this.warnColor = options.warnColor || "rgb(230, 162, 60)";
        this.successColor = options.successColor || "rgb(103, 194, 58)";
        this.interceptor = options.interceptor;
        this._noConsole = false;
    }
    JcConsole.prototype._style = function (options) {
        var _this = this;
        var style = {};
        var styleObject = {};
        var optionsStyle = options.style;
        style.borderRadius = options.radius || this.radius;
        ["fontSize", "color", "padding", "backgroundColor", "margin"].forEach(function (key) {
            // @ts-ignore
            var value = options[key] || _this[key];
            if (!value)
                return;
            // @ts-ignore
            style[key] = value;
        });
        style = __assign(__assign(__assign({}, style), this.defaultStyle), optionsStyle);
        for (var key in style) {
            // @ts-ignore
            styleObject[toCamelCase(key)] = style[key];
        }
        return styleObject;
    };
    JcConsole.prototype._log = function (args, noConsole) {
        var _this = this;
        if (typeof args !== "object" || args === null)
            return;
        var logParamsArray = [];
        // init object
        var options = logParamsArray.concat(args).map(function (item) {
            var text = "".concat(isUndef(item.text) ? _this.text : item.text);
            var style = _this._style(item);
            return {
                type: item.type,
                text: text,
                style: style,
            };
        });
        // some object
        var texts = options.map(function (item) { return "%c".concat(item.text); });
        var styles = options.map(function (item) {
            var style = Object.keys(item.style).reduce(function (last, next) {
                // @ts-ignore
                last[camelToKebab(next)] = item.style[next];
                return last;
            }, {});
            return style;
        });
        // last object
        var strTexts = texts.join("");
        var strStyles = styles.map(function (style) {
            return (Object.keys(style)
                // @ts-ignore
                .map(function (key) { return "".concat(key, ":").concat(style[key], ";"); })
                .join(""));
        });
        // console
        var iscon = isUndef(noConsole) ? this.options.noConsole : noConsole;
        var logReturn = {
            noConsole: iscon,
            logArgs: __spreadArray([strTexts], strStyles, true),
            args: args,
            texts: texts,
            options: options,
            styles: styles,
        };
        // interceptor
        if (!this._noConsole) {
            if (this.interceptor && typeof this.interceptor === "function") {
                var res = this.interceptor(logReturn);
                if (res) {
                    logReturn = res;
                }
            }
            !logReturn.noConsole && console.log.apply(console, __spreadArray([strTexts], strStyles, false));
        }
        return logReturn;
    };
    JcConsole.prototype._img = function (url, width, height, style, noConsole) {
        if (width === void 0) { width = "100px"; }
        if (height === void 0) { height = "100px"; }
        return this._log({
            text: " ",
            style: __assign({ backgroundColor: "tranparent", padding: "".concat(height, " ").concat(width), backgroundSize: "contain", backgroundRepeat: "no-repeat", backgroundImage: "url(".concat(url, ")") }, style),
            type: "img",
        }, noConsole);
    };
    JcConsole.prototype.error = function (text, style, noConsole) {
        return this._log({
            text: text || "error",
            backgroundColor: this.errorColor,
            style: style,
            type: "error",
        }, noConsole);
    };
    JcConsole.prototype.danger = function (text, style, noConsole) {
        return this._log({
            text: text || "danger",
            backgroundColor: this.dangerColor,
            style: style,
            type: "danger",
        }, noConsole);
    };
    JcConsole.prototype.info = function (text, style, noConsole) {
        return this._log({
            text: text || "info",
            backgroundColor: this.infoColor,
            style: style,
            type: "info",
        }, noConsole);
    };
    JcConsole.prototype.primary = function (text, style, noConsole) {
        return this._log({
            text: text || "primary",
            backgroundColor: this.primaryColor,
            style: style,
            type: "primary",
        }, noConsole);
    };
    JcConsole.prototype.log = function (text, style, noConsole) {
        return this._log({
            text: text || "log",
            backgroundColor: "transparent",
            color: "#333",
            style: style,
            type: "log",
        }, noConsole);
    };
    JcConsole.prototype.success = function (text, style, noConsole) {
        return this._log({
            text: text || "success",
            backgroundColor: this.successColor,
            style: style,
            type: "success",
        }, noConsole);
    };
    JcConsole.prototype.warn = function (text, style, noConsole) {
        return this._log({
            text: text || "warn",
            backgroundColor: this.warnColor,
            style: style,
            type: "warn",
        }, noConsole);
    };
    JcConsole.prototype.img = function (params, width, height, style, noConsole) {
        if (typeof params === "string") {
            return this._img(params, width, height, style, noConsole);
        }
        if (typeof params === "object") {
            var url = params.url, width_1 = params.width, height_1 = params.height, style_1 = params.style;
            return this._img(url, width_1, height_1, style_1, noConsole);
        }
    };
    JcConsole.prototype.row = function (fn, style, noConsole) {
        var logparams;
        if (typeof fn === "function") {
            this._noConsole = true;
            var result = this._log(fn().map(function (item) { return item.args; }));
            this._noConsole = false;
            logparams = result.args.map(function (item) {
                return __assign(__assign({}, item), { style: __assign(__assign({}, item.style), style) });
            });
        }
        else {
            logparams = fn;
        }
        return this._log(logparams, noConsole);
    };
    return JcConsole;
}());

export { JcConsole as default };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
